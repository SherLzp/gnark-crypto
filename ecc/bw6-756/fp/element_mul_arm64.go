// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fp

import (
	"math/bits"
)

// Mul z = x * y (mod q)
//
// x and y must be strictly inferior to q
func (z *Element) Mul(x, y *Element) *Element {

	// Implements CIOS multiplication -- section 2.3.2 of Tolga Acar's thesis
	// https://www.microsoft.com/en-us/research/wp-content/uploads/1998/06/97Acar.pdf
	//
	// The algorithm:
	//
	// for i=0 to N-1
	// 		C := 0
	// 		for j=0 to N-1
	// 			(C,t[j]) := t[j] + x[j]*y[i] + C
	// 		(t[N+1],t[N]) := t[N] + C
	//
	// 		C := 0
	// 		m := t[0]*q'[0] mod D
	// 		(C,_) := t[0] + m*q[0]
	// 		for j=1 to N-1
	// 			(C,t[j-1]) := t[j] + m*q[j] + C
	//
	// 		(C,t[N-1]) := t[N] + C
	// 		t[N] := t[N+1] + C
	//
	// → N is the number of machine words needed to store the modulus q
	// → D is the word size. For example, on a 64-bit architecture D is 2	64
	// → x[i], y[i], q[i] is the ith word of the numbers x,y,q
	// → q'[0] is the lowest word of the number -q⁻¹ mod r. This quantity is pre-computed, as it does not depend on the inputs.
	// → t is a temporary array of size N+2
	// → C, S are machine words. A pair (C,S) refers to (hi-bits, lo-bits) of a two-word number
	//
	// As described here https://hackmd.io/@gnark/modular_multiplication we can get rid of one carry chain and simplify:
	//
	// for i=0 to N-1
	// 		(A,t[0]) := t[0] + x[0]*y[i]
	// 		m := t[0]*q'[0] mod W
	// 		C,_ := t[0] + m*q[0]
	// 		for j=1 to N-1
	// 			(A,t[j])  := t[j] + x[j]*y[i] + A
	// 			(C,t[j-1]) := t[j] + m*q[j] + C
	//
	// 		t[N-1] = C + A
	//
	// This optimization saves 5N + 2 additions in the algorithm, and can be used whenever the highest bit
	// of the modulus is zero (and not all of the remaining bits are set).

	var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11 uint64
	var u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11 uint64
	var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 uint64
	v0 = y[0]
	v1 = y[1]
	v2 = y[2]
	v3 = y[3]
	v4 = y[4]
	v5 = y[5]
	v6 = y[6]
	v7 = y[7]
	v8 = y[8]
	v9 = y[9]
	v10 = y[10]
	v11 = y[11]
	{
		var c0, c1, c2 uint64
		v := x[0]
		u0, t0 = bits.Mul64(v, v0)
		u1, t1 = bits.Mul64(v, v1)
		u2, t2 = bits.Mul64(v, v2)
		u3, t3 = bits.Mul64(v, v3)
		u4, t4 = bits.Mul64(v, v4)
		u5, t5 = bits.Mul64(v, v5)
		u6, t6 = bits.Mul64(v, v6)
		u7, t7 = bits.Mul64(v, v7)
		u8, t8 = bits.Mul64(v, v8)
		u9, t9 = bits.Mul64(v, v9)
		u10, t10 = bits.Mul64(v, v10)
		u11, t11 = bits.Mul64(v, v11)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, 0, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[1]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[2]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[3]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[4]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[5]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[6]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[7]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[8]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[9]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[10]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	{
		var c0, c1, c2 uint64
		v := x[11]
		u0, c1 = bits.Mul64(v, v0)
		t0, c0 = bits.Add64(c1, t0, 0)
		u1, c1 = bits.Mul64(v, v1)
		t1, c0 = bits.Add64(c1, t1, c0)
		u2, c1 = bits.Mul64(v, v2)
		t2, c0 = bits.Add64(c1, t2, c0)
		u3, c1 = bits.Mul64(v, v3)
		t3, c0 = bits.Add64(c1, t3, c0)
		u4, c1 = bits.Mul64(v, v4)
		t4, c0 = bits.Add64(c1, t4, c0)
		u5, c1 = bits.Mul64(v, v5)
		t5, c0 = bits.Add64(c1, t5, c0)
		u6, c1 = bits.Mul64(v, v6)
		t6, c0 = bits.Add64(c1, t6, c0)
		u7, c1 = bits.Mul64(v, v7)
		t7, c0 = bits.Add64(c1, t7, c0)
		u8, c1 = bits.Mul64(v, v8)
		t8, c0 = bits.Add64(c1, t8, c0)
		u9, c1 = bits.Mul64(v, v9)
		t9, c0 = bits.Add64(c1, t9, c0)
		u10, c1 = bits.Mul64(v, v10)
		t10, c0 = bits.Add64(c1, t10, c0)
		u11, c1 = bits.Mul64(v, v11)
		t11, c0 = bits.Add64(c1, t11, c0)

		c2, _ = bits.Add64(0, 0, c0)
		t1, c0 = bits.Add64(u0, t1, 0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		m := qInvNeg * t0

		u0, c1 = bits.Mul64(m, q0)
		_, c0 = bits.Add64(t0, c1, 0)
		u1, c1 = bits.Mul64(m, q1)
		t0, c0 = bits.Add64(t1, c1, c0)
		u2, c1 = bits.Mul64(m, q2)
		t1, c0 = bits.Add64(t2, c1, c0)
		u3, c1 = bits.Mul64(m, q3)
		t2, c0 = bits.Add64(t3, c1, c0)
		u4, c1 = bits.Mul64(m, q4)
		t3, c0 = bits.Add64(t4, c1, c0)
		u5, c1 = bits.Mul64(m, q5)
		t4, c0 = bits.Add64(t5, c1, c0)
		u6, c1 = bits.Mul64(m, q6)
		t5, c0 = bits.Add64(t6, c1, c0)
		u7, c1 = bits.Mul64(m, q7)
		t6, c0 = bits.Add64(t7, c1, c0)
		u8, c1 = bits.Mul64(m, q8)
		t7, c0 = bits.Add64(t8, c1, c0)
		u9, c1 = bits.Mul64(m, q9)
		t8, c0 = bits.Add64(t9, c1, c0)
		u10, c1 = bits.Mul64(m, q10)
		t9, c0 = bits.Add64(t10, c1, c0)
		u11, c1 = bits.Mul64(m, q11)

		t10, c0 = bits.Add64(0, c1, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)

	}
	z[0] = t0
	z[1] = t1
	z[2] = t2
	z[3] = t3
	z[4] = t4
	z[5] = t5
	z[6] = t6
	z[7] = t7
	z[8] = t8
	z[9] = t9
	z[10] = t10
	z[11] = t11

	// if z ⩾ q → z -= q
	if !z.smallerThanModulus() {
		var b uint64
		z[0], b = bits.Sub64(z[0], q0, 0)
		z[1], b = bits.Sub64(z[1], q1, b)
		z[2], b = bits.Sub64(z[2], q2, b)
		z[3], b = bits.Sub64(z[3], q3, b)
		z[4], b = bits.Sub64(z[4], q4, b)
		z[5], b = bits.Sub64(z[5], q5, b)
		z[6], b = bits.Sub64(z[6], q6, b)
		z[7], b = bits.Sub64(z[7], q7, b)
		z[8], b = bits.Sub64(z[8], q8, b)
		z[9], b = bits.Sub64(z[9], q9, b)
		z[10], b = bits.Sub64(z[10], q10, b)
		z[11], _ = bits.Sub64(z[11], q11, b)
	}
	return z
}

// Square z = x * x (mod q)
//
// x must be strictly inferior to q
func (z *Element) Square(x *Element) *Element {
	// see Mul for algorithm documentation

	var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11 uint64
	var u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11 uint64
	var lo0, lo1, lo2, lo3, lo4, lo5, lo6, lo7, lo8, lo9, lo10, lo11 uint64

	// note that if hi, _ = bits.Mul64() didn't generate
	// UMULH and MUL, (but just UMULH) we could use same pattern
	// as in mulRaw and reduce the stack space of this function (no need for lo..)
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u0, lo1 = bits.Mul64(x[0], x[0])
		u1, t1 = bits.Mul64(x[1], x[0])
		u2, t2 = bits.Mul64(x[2], x[0])
		u3, t3 = bits.Mul64(x[3], x[0])
		u4, t4 = bits.Mul64(x[4], x[0])
		u5, t5 = bits.Mul64(x[5], x[0])
		u6, t6 = bits.Mul64(x[6], x[0])
		u7, t7 = bits.Mul64(x[7], x[0])
		u8, t8 = bits.Mul64(x[8], x[0])
		u9, t9 = bits.Mul64(x[9], x[0])
		u10, t10 = bits.Mul64(x[10], x[0])
		u11, t11 = bits.Mul64(x[11], x[0])

		// propagate lo, from t[j] to end, twice.
		t1, c0 = bits.Add64(t1, t1, 0)
		t2, c0 = bits.Add64(t2, t2, c0)
		t3, c0 = bits.Add64(t3, t3, c0)
		t4, c0 = bits.Add64(t4, t4, c0)
		t5, c0 = bits.Add64(t5, t5, c0)
		t6, c0 = bits.Add64(t6, t6, c0)
		t7, c0 = bits.Add64(t7, t7, c0)
		t8, c0 = bits.Add64(t8, t8, c0)
		t9, c0 = bits.Add64(t9, t9, c0)
		t10, c0 = bits.Add64(t10, t10, c0)
		t11, c0 = bits.Add64(t11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t0, c0 = bits.Add64(lo1, t0, 0)

		// propagate u0 + hi
		t1, c0 = bits.Add64(u0, t1, c0)
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t2, c0 = bits.Add64(u1, t2, 0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u1, lo1 = bits.Mul64(x[1], x[1])
		u2, lo2 = bits.Mul64(x[2], x[1])
		u3, lo3 = bits.Mul64(x[3], x[1])
		u4, lo4 = bits.Mul64(x[4], x[1])
		u5, lo5 = bits.Mul64(x[5], x[1])
		u6, lo6 = bits.Mul64(x[6], x[1])
		u7, lo7 = bits.Mul64(x[7], x[1])
		u8, lo8 = bits.Mul64(x[8], x[1])
		u9, lo9 = bits.Mul64(x[9], x[1])
		u10, lo10 = bits.Mul64(x[10], x[1])
		u11, lo11 = bits.Mul64(x[11], x[1])

		// propagate lo, from t[j] to end, twice.
		lo2, c0 = bits.Add64(lo2, lo2, 0)
		lo3, c0 = bits.Add64(lo3, lo3, c0)
		lo4, c0 = bits.Add64(lo4, lo4, c0)
		lo5, c0 = bits.Add64(lo5, lo5, c0)
		lo6, c0 = bits.Add64(lo6, lo6, c0)
		lo7, c0 = bits.Add64(lo7, lo7, c0)
		lo8, c0 = bits.Add64(lo8, lo8, c0)
		lo9, c0 = bits.Add64(lo9, lo9, c0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t2, c0 = bits.Add64(lo2, t2, 0)
		t3, c0 = bits.Add64(lo3, t3, c0)
		t4, c0 = bits.Add64(lo4, t4, c0)
		t5, c0 = bits.Add64(lo5, t5, c0)
		t6, c0 = bits.Add64(lo6, t6, c0)
		t7, c0 = bits.Add64(lo7, t7, c0)
		t8, c0 = bits.Add64(lo8, t8, c0)
		t9, c0 = bits.Add64(lo9, t9, c0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t1, c0 = bits.Add64(lo1, t1, 0)

		// propagate u1 + hi
		t2, c0 = bits.Add64(u1, t2, c0)
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t3, c0 = bits.Add64(u2, t3, 0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u2, lo2 = bits.Mul64(x[2], x[2])
		u3, lo3 = bits.Mul64(x[3], x[2])
		u4, lo4 = bits.Mul64(x[4], x[2])
		u5, lo5 = bits.Mul64(x[5], x[2])
		u6, lo6 = bits.Mul64(x[6], x[2])
		u7, lo7 = bits.Mul64(x[7], x[2])
		u8, lo8 = bits.Mul64(x[8], x[2])
		u9, lo9 = bits.Mul64(x[9], x[2])
		u10, lo10 = bits.Mul64(x[10], x[2])
		u11, lo11 = bits.Mul64(x[11], x[2])

		// propagate lo, from t[j] to end, twice.
		lo3, c0 = bits.Add64(lo3, lo3, 0)
		lo4, c0 = bits.Add64(lo4, lo4, c0)
		lo5, c0 = bits.Add64(lo5, lo5, c0)
		lo6, c0 = bits.Add64(lo6, lo6, c0)
		lo7, c0 = bits.Add64(lo7, lo7, c0)
		lo8, c0 = bits.Add64(lo8, lo8, c0)
		lo9, c0 = bits.Add64(lo9, lo9, c0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t3, c0 = bits.Add64(lo3, t3, 0)
		t4, c0 = bits.Add64(lo4, t4, c0)
		t5, c0 = bits.Add64(lo5, t5, c0)
		t6, c0 = bits.Add64(lo6, t6, c0)
		t7, c0 = bits.Add64(lo7, t7, c0)
		t8, c0 = bits.Add64(lo8, t8, c0)
		t9, c0 = bits.Add64(lo9, t9, c0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t2, c0 = bits.Add64(lo2, t2, 0)

		// propagate u2 + hi
		t3, c0 = bits.Add64(u2, t3, c0)
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t4, c0 = bits.Add64(u3, t4, 0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u3, lo3 = bits.Mul64(x[3], x[3])
		u4, lo4 = bits.Mul64(x[4], x[3])
		u5, lo5 = bits.Mul64(x[5], x[3])
		u6, lo6 = bits.Mul64(x[6], x[3])
		u7, lo7 = bits.Mul64(x[7], x[3])
		u8, lo8 = bits.Mul64(x[8], x[3])
		u9, lo9 = bits.Mul64(x[9], x[3])
		u10, lo10 = bits.Mul64(x[10], x[3])
		u11, lo11 = bits.Mul64(x[11], x[3])

		// propagate lo, from t[j] to end, twice.
		lo4, c0 = bits.Add64(lo4, lo4, 0)
		lo5, c0 = bits.Add64(lo5, lo5, c0)
		lo6, c0 = bits.Add64(lo6, lo6, c0)
		lo7, c0 = bits.Add64(lo7, lo7, c0)
		lo8, c0 = bits.Add64(lo8, lo8, c0)
		lo9, c0 = bits.Add64(lo9, lo9, c0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t4, c0 = bits.Add64(lo4, t4, 0)
		t5, c0 = bits.Add64(lo5, t5, c0)
		t6, c0 = bits.Add64(lo6, t6, c0)
		t7, c0 = bits.Add64(lo7, t7, c0)
		t8, c0 = bits.Add64(lo8, t8, c0)
		t9, c0 = bits.Add64(lo9, t9, c0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t3, c0 = bits.Add64(lo3, t3, 0)

		// propagate u3 + hi
		t4, c0 = bits.Add64(u3, t4, c0)
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t5, c0 = bits.Add64(u4, t5, 0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u4, lo4 = bits.Mul64(x[4], x[4])
		u5, lo5 = bits.Mul64(x[5], x[4])
		u6, lo6 = bits.Mul64(x[6], x[4])
		u7, lo7 = bits.Mul64(x[7], x[4])
		u8, lo8 = bits.Mul64(x[8], x[4])
		u9, lo9 = bits.Mul64(x[9], x[4])
		u10, lo10 = bits.Mul64(x[10], x[4])
		u11, lo11 = bits.Mul64(x[11], x[4])

		// propagate lo, from t[j] to end, twice.
		lo5, c0 = bits.Add64(lo5, lo5, 0)
		lo6, c0 = bits.Add64(lo6, lo6, c0)
		lo7, c0 = bits.Add64(lo7, lo7, c0)
		lo8, c0 = bits.Add64(lo8, lo8, c0)
		lo9, c0 = bits.Add64(lo9, lo9, c0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t5, c0 = bits.Add64(lo5, t5, 0)
		t6, c0 = bits.Add64(lo6, t6, c0)
		t7, c0 = bits.Add64(lo7, t7, c0)
		t8, c0 = bits.Add64(lo8, t8, c0)
		t9, c0 = bits.Add64(lo9, t9, c0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t4, c0 = bits.Add64(lo4, t4, 0)

		// propagate u4 + hi
		t5, c0 = bits.Add64(u4, t5, c0)
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t6, c0 = bits.Add64(u5, t6, 0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u5, lo5 = bits.Mul64(x[5], x[5])
		u6, lo6 = bits.Mul64(x[6], x[5])
		u7, lo7 = bits.Mul64(x[7], x[5])
		u8, lo8 = bits.Mul64(x[8], x[5])
		u9, lo9 = bits.Mul64(x[9], x[5])
		u10, lo10 = bits.Mul64(x[10], x[5])
		u11, lo11 = bits.Mul64(x[11], x[5])

		// propagate lo, from t[j] to end, twice.
		lo6, c0 = bits.Add64(lo6, lo6, 0)
		lo7, c0 = bits.Add64(lo7, lo7, c0)
		lo8, c0 = bits.Add64(lo8, lo8, c0)
		lo9, c0 = bits.Add64(lo9, lo9, c0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t6, c0 = bits.Add64(lo6, t6, 0)
		t7, c0 = bits.Add64(lo7, t7, c0)
		t8, c0 = bits.Add64(lo8, t8, c0)
		t9, c0 = bits.Add64(lo9, t9, c0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t5, c0 = bits.Add64(lo5, t5, 0)

		// propagate u5 + hi
		t6, c0 = bits.Add64(u5, t6, c0)
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t7, c0 = bits.Add64(u6, t7, 0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u6, lo6 = bits.Mul64(x[6], x[6])
		u7, lo7 = bits.Mul64(x[7], x[6])
		u8, lo8 = bits.Mul64(x[8], x[6])
		u9, lo9 = bits.Mul64(x[9], x[6])
		u10, lo10 = bits.Mul64(x[10], x[6])
		u11, lo11 = bits.Mul64(x[11], x[6])

		// propagate lo, from t[j] to end, twice.
		lo7, c0 = bits.Add64(lo7, lo7, 0)
		lo8, c0 = bits.Add64(lo8, lo8, c0)
		lo9, c0 = bits.Add64(lo9, lo9, c0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t7, c0 = bits.Add64(lo7, t7, 0)
		t8, c0 = bits.Add64(lo8, t8, c0)
		t9, c0 = bits.Add64(lo9, t9, c0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t6, c0 = bits.Add64(lo6, t6, 0)

		// propagate u6 + hi
		t7, c0 = bits.Add64(u6, t7, c0)
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t8, c0 = bits.Add64(u7, t8, 0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u7, lo7 = bits.Mul64(x[7], x[7])
		u8, lo8 = bits.Mul64(x[8], x[7])
		u9, lo9 = bits.Mul64(x[9], x[7])
		u10, lo10 = bits.Mul64(x[10], x[7])
		u11, lo11 = bits.Mul64(x[11], x[7])

		// propagate lo, from t[j] to end, twice.
		lo8, c0 = bits.Add64(lo8, lo8, 0)
		lo9, c0 = bits.Add64(lo9, lo9, c0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t8, c0 = bits.Add64(lo8, t8, 0)
		t9, c0 = bits.Add64(lo9, t9, c0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t7, c0 = bits.Add64(lo7, t7, 0)

		// propagate u7 + hi
		t8, c0 = bits.Add64(u7, t8, c0)
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t9, c0 = bits.Add64(u8, t9, 0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u8, lo8 = bits.Mul64(x[8], x[8])
		u9, lo9 = bits.Mul64(x[9], x[8])
		u10, lo10 = bits.Mul64(x[10], x[8])
		u11, lo11 = bits.Mul64(x[11], x[8])

		// propagate lo, from t[j] to end, twice.
		lo9, c0 = bits.Add64(lo9, lo9, 0)
		lo10, c0 = bits.Add64(lo10, lo10, c0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t9, c0 = bits.Add64(lo9, t9, 0)
		t10, c0 = bits.Add64(lo10, t10, c0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t8, c0 = bits.Add64(lo8, t8, 0)

		// propagate u8 + hi
		t9, c0 = bits.Add64(u8, t9, c0)
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t10, c0 = bits.Add64(u9, t10, 0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u9, lo9 = bits.Mul64(x[9], x[9])
		u10, lo10 = bits.Mul64(x[10], x[9])
		u11, lo11 = bits.Mul64(x[11], x[9])

		// propagate lo, from t[j] to end, twice.
		lo10, c0 = bits.Add64(lo10, lo10, 0)
		lo11, c0 = bits.Add64(lo11, lo11, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(lo10, t10, 0)
		t11, c0 = bits.Add64(lo11, t11, c0)
		c2, _ = bits.Add64(c2, 0, c0)

		t9, c0 = bits.Add64(lo9, t9, 0)

		// propagate u9 + hi
		t10, c0 = bits.Add64(u9, t10, c0)
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		t11, c0 = bits.Add64(u10, t11, 0)
		c2, _ = bits.Add64(c2, u11, c0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u10, lo10 = bits.Mul64(x[10], x[10])
		u11, lo11 = bits.Mul64(x[11], x[10])

		// propagate lo, from t[j] to end, twice.
		lo11, c0 = bits.Add64(lo11, lo11, 0)
		c2, _ = bits.Add64(c2, 0, c0)
		t11, c0 = bits.Add64(lo11, t11, 0)
		c2, _ = bits.Add64(c2, 0, c0)

		t10, c0 = bits.Add64(lo10, t10, 0)

		// propagate u10 + hi
		t11, c0 = bits.Add64(u10, t11, c0)
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again
		c2, _ = bits.Add64(c2, u11, 0)

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	{

		var c0, c2 uint64

		// for j=i+1 to N-1
		//     p,C,t[j] = 2*a[j]*a[i] + t[j] + (p,C)
		// A = C
		u11, lo11 = bits.Mul64(x[11], x[11])

		// propagate lo, from t[j] to end, twice.

		t11, c0 = bits.Add64(lo11, t11, 0)

		// propagate u11 + hi
		c2, _ = bits.Add64(u11, c2, c0)

		// hi again

		// this part is unchanged.
		m := qInvNeg * t0
		u0, lo0 = bits.Mul64(m, q0)
		u1, lo1 = bits.Mul64(m, q1)
		u2, lo2 = bits.Mul64(m, q2)
		u3, lo3 = bits.Mul64(m, q3)
		u4, lo4 = bits.Mul64(m, q4)
		u5, lo5 = bits.Mul64(m, q5)
		u6, lo6 = bits.Mul64(m, q6)
		u7, lo7 = bits.Mul64(m, q7)
		u8, lo8 = bits.Mul64(m, q8)
		u9, lo9 = bits.Mul64(m, q9)
		u10, lo10 = bits.Mul64(m, q10)
		u11, lo11 = bits.Mul64(m, q11)
		_, c0 = bits.Add64(t0, lo0, 0)
		t0, c0 = bits.Add64(t1, lo1, c0)
		t1, c0 = bits.Add64(t2, lo2, c0)
		t2, c0 = bits.Add64(t3, lo3, c0)
		t3, c0 = bits.Add64(t4, lo4, c0)
		t4, c0 = bits.Add64(t5, lo5, c0)
		t5, c0 = bits.Add64(t6, lo6, c0)
		t6, c0 = bits.Add64(t7, lo7, c0)
		t7, c0 = bits.Add64(t8, lo8, c0)
		t8, c0 = bits.Add64(t9, lo9, c0)
		t9, c0 = bits.Add64(t10, lo10, c0)
		t10, c0 = bits.Add64(0, lo11, c0)
		u11, _ = bits.Add64(u11, 0, c0)
		t0, c0 = bits.Add64(u0, t0, 0)
		t1, c0 = bits.Add64(u1, t1, c0)
		t2, c0 = bits.Add64(u2, t2, c0)
		t3, c0 = bits.Add64(u3, t3, c0)
		t4, c0 = bits.Add64(u4, t4, c0)
		t5, c0 = bits.Add64(u5, t5, c0)
		t6, c0 = bits.Add64(u6, t6, c0)
		t7, c0 = bits.Add64(u7, t7, c0)
		t8, c0 = bits.Add64(u8, t8, c0)
		t9, c0 = bits.Add64(u9, t9, c0)
		t10, c0 = bits.Add64(u10, t10, c0)
		c2, _ = bits.Add64(c2, 0, c0)
		t10, c0 = bits.Add64(t11, t10, 0)
		t11, _ = bits.Add64(u11, c2, c0)
	}
	z[0] = t0
	z[1] = t1
	z[2] = t2
	z[3] = t3
	z[4] = t4
	z[5] = t5
	z[6] = t6
	z[7] = t7
	z[8] = t8
	z[9] = t9
	z[10] = t10
	z[11] = t11

	// if z ⩾ q → z -= q
	if !z.smallerThanModulus() {
		var b uint64
		z[0], b = bits.Sub64(z[0], q0, 0)
		z[1], b = bits.Sub64(z[1], q1, b)
		z[2], b = bits.Sub64(z[2], q2, b)
		z[3], b = bits.Sub64(z[3], q3, b)
		z[4], b = bits.Sub64(z[4], q4, b)
		z[5], b = bits.Sub64(z[5], q5, b)
		z[6], b = bits.Sub64(z[6], q6, b)
		z[7], b = bits.Sub64(z[7], q7, b)
		z[8], b = bits.Sub64(z[8], q8, b)
		z[9], b = bits.Sub64(z[9], q9, b)
		z[10], b = bits.Sub64(z[10], q10, b)
		z[11], _ = bits.Sub64(z[11], q11, b)
	}
	return z
}
